import os
import io
import re

filename = ['src.srt', 'target.ass']

# Parts of md syntax
match_rules = {'H1': r'#\s+(.*?)\n', 'Emptyline': r'\s*\n', 'Numid': r'\d+', \
	'Srttimemark': r'(\d*:\d{2}:\d{2}),(\d{3})\s*-->\s*(\d*:\d{2}:\d{2}),(\d{3})', \
	'Bold': r'\*\*(.*?)\*\*', 'Italic2': r'\s+_(.*?)_\s+', \
	'Bold2': r'\s+__(.*?)\*\*\s+', 'Italic': r'\*(.*?)\*', \
	'Strikeout': r'~~(.*?)~~', 'Code': r'`(.*?)`', 'CHN': r'([\u4e00-\u9fa5]+)'}

# ASS Code Effect for text
# Code color -> B7F5F7 as RGB and F7F5B7 as BGR
ass_codes = {'Bold': r'{\\b1}\g<1>{\\b0}', 'Italic': r'{\\i1}\g<1>{\\i0}', \
	'Strikeout': r'{\\s1}\g<1>{\\s0}', 'Code': r'{\\fnFira Code}{\\c&HF7F5B7&}\g<1>{\\r}', \
	'CHN': r'{\\fnSimHei}\g<1>{\\r}'}

# ass file metadata
meta_header = ['[Script Info]', '; ASS Generated by Mdsub', 'Title: %s', \
	'ScriptType: v4.00+', 'Collisions: Reverse', 'WrapStyle: 0', 'ScaledBorderAndShadow: yes',\
	'YCbCr Matrix: None']

# ass style metadata
meta_style = ['[V4+ Styles]', 'Format: Name, Fontname, Fontsize, PrimaryColour, '
	'SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, '
	'StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, '
	'Alignment, MarginL, MarginR, MarginV, Encoding']

# ass events metadata
meta_events = ['[Events]', 'Format: Layer, Start, End, Style, Name, '
	'MarginL, MarginR, MarginV, Effect, Text']

# STYLES
plain_style = ['Plain', 'Candara', '14', '&H00FFFFFF', '&H000000FF', '&H66000000', '&HFF000000', \
	'0', '0', '0', '0', '100', '100', '0', '0', '3', '1', '0', '2', '5', '5', '10', '1']

# code_style = []

# DIALOG_TEMPLATE
dialog_template = ['0', '%s', '%s', '%s', '', \
	'0', '0', '0', '', '%s']

def Write_ass(title: str, styles: list, subtext: list):
	meta_header[2] = meta_header[2] % title
	for st in styles:
		meta_style.append('Style: %s' % ','.join(st))
	
	dialog_text = []
	for text in subtext:
		dialog_text.append('Dialogue: ' + ','.join(dialog_template) % text)
		print(dialog_text[-1])
	
	print(meta_header[2])
	print(meta_style)
	print(dialog_text)
	
	with open(filename[1], 'w', encoding='utf-8') as target_ass:
		target_ass.write('\n'.join(meta_header) + '\n\n')
		target_ass.write('\n'.join(meta_style) + '\n\n')
		target_ass.write('\n'.join(meta_events) + '\n')
		target_ass.write(''.join(dialog_text) + '\n')
		
	print('ASS write OK.')
	
def Markdown_parse(base: str):
	bold_coded = re.sub(match_rules['Bold'], ass_codes['Bold'], base)
	bold_coded = re.sub(match_rules['Bold2'], ass_codes['Bold'], bold_coded)
	italic_coded = re.sub(match_rules['Italic'], ass_codes['Italic'], bold_coded)
	italic_coded = re.sub(match_rules['Italic2'], ass_codes['Italic'], italic_coded)
	strike_coded = re.sub(match_rules['Strikeout'], ass_codes['Strikeout'], italic_coded)
	syntax_coded = re.sub(match_rules['Code'], ass_codes['Code'], strike_coded)
	chinese_coded = re.sub(match_rules['CHN'], ass_codes['CHN'], syntax_coded)
	return chinese_coded
	

with open(filename[0], 'r', encoding='utf-8') as src_md:
	try:
		title = re.match(match_rules['H1'], src_md.readline()).group(1)
	except AttributeError:
		title = 'Mdsub Default Title'
		src_md.seek(0, io.SEEK_SET)
		
		# print('No found sub title.', src_md.readline())
		# src_md.seek(0, io.SEEK_SET)
	
	subtext: list = []
	
	for line in src_md:
		if re.match(match_rules['Emptyline'], line):
			dialog_begin = 1
		elif re.match(match_rules['Numid'], line) and (dialog_begin == 1):
			dialog_begin = 2
		elif re.match(match_rules['Srttimemark'], line) and (dialog_begin == 2):
			matched = re.match(match_rules['Srttimemark'], line)
			st_time = matched.group(1) + '.' + matched.group(2)
			ed_time = matched.group(3) + '.' + matched.group(4)
			if st_time[0] == '0':
				st_time = st_time[1:-1]
			if ed_time[0] == '0':
				ed_time = ed_time[1:-1]
			dialog_begin = 3
				
			print(st_time + ',' + ed_time)
			
		elif dialog_begin == 3:
			
			subtext.append( (st_time, ed_time, 'Plain', Markdown_parse(line)) )
	
	
	Write_ass(title, [plain_style], subtext)