[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Last Style Storage: Default
Video Zoom Percent: 0.375000
Active Line: 5
Video Position: 716

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: ch1_test,黑体,28,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,3,0,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.35,0:00:02.61,ch1_test,,0,0,0,,好的，欢迎回来[*]
Dialogue: 0,0:00:03.41,0:00:07.58,ch1_test,,0,0,0,,今天我们要分别谈谈与 Shell 有关的两个话题
Dialogue: 0,0:00:07.78,0:00:11.48,ch1_test,,0,0,0,,首先我们要讲 Shell 脚本，这主要和 bash 有关
Dialogue: 0,0:00:11.48,0:00:16.08,ch1_test,,0,0,0,,这将会是你们大多数人一开始在 macOS
Dialogue: 0,0:00:16.08,0:00:17.85,ch1_test,,0,0,0,,或者大多数 Linux 里接触的 Shell
Dialogue: 0,0:00:17.85,0:00:18.85,ch1_test,,0,0,0,,bash 是它们默认的 Shell
Dialogue: 0,0:00:19.21,0:00:20.71,ch1_test,,0,0,0,,并且其他 Shell ，像是 zsh
Dialogue: 0,0:00:20.71,0:00:22.78,ch1_test,,0,0,0,,对其有良好的向后兼容，这非常棒 [*]
Dialogue: 0,0:00:22.78,0:00:26.55,ch1_test,,0,0,0,,然后我们要谈谈特别方便的其他 Shell 工具
Dialogue: 0,0:00:26.55,0:00:29.45,ch1_test,,0,0,0,,你们可以用它避免重复执行任务
Dialogue: 0,0:00:29.45,0:00:31.58,ch1_test,,0,0,0,,像是寻找一段代码
Dialogue: 0,0:00:31.58,0:00:34.25,ch1_test,,0,0,0,,或者一些犄角旮旯的文件
Dialogue: 0,0:00:34.25,0:00:36.71,ch1_test,,0,0,0,,bash 里也有许多很棒的内置命令
Dialogue: 0,0:00:36.71,0:00:40.08,ch1_test,,0,0,0,,它们可以帮你做这些事情
Dialogue: 0,0:00:41.88,0:00:44.61,ch1_test,,0,0,0,,昨天我们已经介绍了 Shell
Dialogue: 0,0:00:44.61,0:00:46.65,ch1_test,,0,0,0,,和它的一些特性 # REVIEW
Dialogue: 0,0:00:46.65,0:00:49.28,ch1_test,,0,0,0,,就比如说你怎样执行一个命令
Dialogue: 0,0:00:49.28,0:00:50.58,ch1_test,,0,0,0,,或者重定向它们（的输入输出）
Dialogue: 0,0:00:50.58,0:00:52.31,ch1_test,,0,0,0,,今天我们将多讲一些 Shell 脚本中的
Dialogue: 0,0:00:52.31,0:00:57.28,ch1_test,,0,0,0,,操纵变量的语法，控制流以及函数
Dialogue: 0,0:00:57.91,0:01:01.35,ch1_test,,0,0,0,,例如，一旦你接触 Shell
Dialogue: 0,0:01:01.95,0:01:03.88,ch1_test,,0,0,0,,说你想要定义一个变量
Dialogue: 0,0:01:03.88,0:01:09.21,ch1_test,,0,0,0,,那是你学习编程语言第一个接触的事情[*]
Dialogue: 0,0:01:09.35,0:01:12.95,ch1_test,,0,0,0,,你可以执行像是 `foo=bar`
Dialogue: 0,0:01:13.61,0:01:18.05,ch1_test,,0,0,0,,并且我们可以通过 `$foo` 操作 `foo` 的值
Dialogue: 0,0:01:18.81,0:01:21.01,ch1_test,,0,0,0,,它是 `bar`，完美~
Dialogue: 0,0:01:21.81,0:01:24.45,ch1_test,,0,0,0,,你需要多加注意的一点是
Dialogue: 0,0:01:24.45,0:01:26.71,ch1_test,,0,0,0,,当你面对着 bash 的时候[*]
Dialogue: 0,0:01:26.71,0:01:28.25,ch1_test,,0,0,0,,空格至关重要[*]
Dialogue: 0,0:01:28.25,0:01:31.18,ch1_test,,0,0,0,,主要是因为空格是个保留字
Dialogue: 0,0:01:31.18,0:01:33.65,ch1_test,,0,0,0,,它的用途是分隔参数
Dialogue: 0,0:01:33.65,0:01:37.55,Default,,0,0,0,,例如，一些像是 `foo = bar` 的操作不管用
Dialogue: 0,0:01:37.95,0:01:42.18,Default,,0,0,0,,Shell 会告诉你它为什么无法生效 # REVIEW
Dialogue: 0,0:01:42.18,0:01:43.95,Default,,0,0,0,,这是它说因为 `foo` 命令无法生效
Dialogue: 0,0:01:44.21,0:01:46.28,Default,,0,0,0,,比如这里提示 `foo` 不存在
Dialogue: 0,0:01:46.28,0:01:49.48,Default,,0,0,0,,实际发生的是，我们没有将 `bar` 赋给 `foo`
Dialogue: 0,0:01:50.28,0:01:56.51,Default,,0,0,0,,而是用 `=` 和 `bar` 作为参数调用了 `foo` 程序
Dialogue: 0,0:01:57.88,0:02:01.65,Default,,0,0,0,,通常，你需要特别关注这类问题
Dialogue: 0,0:02:01.88,0:02:03.95,Default,,0,0,0,,比如说一些带有空格的文件名
Dialogue: 0,0:02:03.95,0:02:10.65,Default,,0,0,0,,你需要小心地把他们用引号引起来
Dialogue: 0,0:02:10.65,0:02:14.55,Default,,0,0,0,,让我们更深入些，探讨一下怎样在 bash 中处理字符串
Dialogue: 0,0:02:14.55,0:02:16.51,Default,,0,0,0,,我们有两种定义字符串的方法：
Dialogue: 0,0:02:16.51,0:02:20.71,Default,,0,0,0,,可以用双引号定义字符串
Dialogue: 0,0:02:20.71,0:02:24.85,Default,,0,0,0,,或者可以用单……
Dialogue: 0,0:02:24.85,0:02:25.75,Default,,0,0,0,,呃，对不起
Dialogue: 0,0:02:26.71,0:02:28.01,Default,,0,0,0,,使用单引号（定义）
Dialogue: 0,0:02:30.21,0:02:33.05,Default,,0,0,0,,虽然对于纯文本字符串，这两种方式是等价的
Dialogue: 0,0:02:33.05,0:02:35.65,Default,,0,0,0,,但是对于其余的字符串，则不相同
Dialogue: 0,0:02:35.65,0:02:43.31,Default,,0,0,0,,例如,我们执行 `echo "Value is $foo"`
Dialogue: 0,0:02:43.98,0:02:47.81,Default,,0,0,0,,其中 `$foo` 将被展开为字符串
Dialogue: 0,0:02:47.81,0:02:51.05,Default,,0,0,0,,并且替换掉 Shell 中 `foo` 变量的值
Dialogue: 0,0:02:51.31,0:02:56.58,Default,,0,0,0,,如果我们用单引号来重复实验
Dialogue: 0,0:02:56.58,0:02:58.95,Default,,0,0,0,,我们仅仅会得到原样的 `$foo`
Dialogue: 0,0:02:59.35,0:03:01.88,Default,,0,0,0,,单引号中的变量将不会被替换
Dialogue: 0,0:03:01.98,0:03:04.48,Default,,0,0,0,,脚本真的十分易于编写
Dialogue: 0,0:03:04.75,0:03:08.21,Default,,0,0,0,,这个就好比…它有点像你更熟悉的 Python # REVIEW
Dialogue: 0,0:03:08.58,0:03:10.75,Default,,0,0,0,,你可能没意识到这点
Dialogue: 0,0:03:11.25,0:03:14.41,Default,,0,0,0,,这就是给变量赋值的方式
Dialogue: 0,0:03:14.41,0:03:18.18,Default,,0,0,0,,我们稍后还会看到 bash 也有控制流技术
Dialogue: 0,0:03:18.18,0:03:20.28,Default,,0,0,0,,像是 for 循环、while 循环
Dialogue: 0,0:03:20.28,0:03:24.38,Default,,0,0,0,,另一个重点是，我们可以定义函数
Dialogue: 0,0:03:24.38,0:03:28.58,Default,,0,0,0,,我们可以访问我在此处定义的函数
Dialogue: 0,0:03:28.58,0:03:32.65,Default,,0,0,0,,这里我们已经定义了 `mcd` 函数
Dialogue: 0,0:03:32.65,0:03:36.11,Default,,0,0,0,,到目前为止，我们已经了解
Dialogue: 0,0:03:36.11,0:03:38.91,Default,,0,0,0,,如何利用管道执行几个命令 # REVIEW
Dialogue: 0,0:03:38.91,0:03:40.91,Default,,0,0,0,,昨天简要地说过
Dialogue: 0,0:03:40.91,0:03:45.15,Default,,0,0,0,,但是很多时候你想先做一件事，然后另一件事
Dialogue: 0,0:03:45.15,0:03:51.11,Default,,0,0,0,,有点像我们这里的顺序执行
Dialogue: 0,0:03:51.11,0:03:53.85,Default,,0,0,0,,看这里，例如，我们可以调用 `mcd` 函数
Dialogue: 0,0:03:57.18,0:04:00.25,Default,,0,0,0,,首先我们调用 `mkdir` 命令
Dialogue: 0,0:04:00.25,0:04:02.51,Default,,0,0,0,,它会创建一个目录
Dialogue: 0,0:04:03.28,0:04:06.15,Default,,0,0,0,,在这里，`$1` 就像是一个特殊变量
Dialogue: 0,0:04:06.15,0:04:07.58,Default,,0,0,0,,这就是 bash 运作的方式
Dialogue: 0,0:04:07.58,0:04:12.31,Default,,0,0,0,,类似于其他脚本语言的 `argv`
Dialogue: 0,0:04:12.31,0:04:16.85,Default,,0,0,0,,数组 `argv` 的第一项将包含参数[*]
Dialogue: 0,0:04:16.85,0:04:18.05,Default,,0,0,0,,在 bash 中同样的东西是 `$1`
Dialogue: 0,0:04:18.05,0:04:22.38,Default,,0,0,0,,一般来说，bash 中许多 `$` 开头的东西
Dialogue: 0,0:04:22.38,0:04:23.11,Default,,0,0,0,,它们都是被保留的[*]
Dialogue: 0,0:04:23.11,0:04:25.45,Default,,0,0,0,,我们之后会看到更多的例子
Dialogue: 0,0:04:26.15,0:04:28.38,Default,,0,0,0,,一旦我们创建了文件夹，
Dialogue: 0,0:04:28.38,0:04:30.51,Default,,0,0,0,,我们就 `cd` 进去
Dialogue: 0,0:04:31.38,0:04:34.55,Default,,0,0,0,,这其实是个挺常见的流程 # REVIEW
Dialogue: 0,0:04:34.98,0:04:38.35,Default,,0,0,0,,实际上，我们直接将其键入到 Shell
Dialogue: 0,0:04:38.35,0:04:40.28,Default,,0,0,0,,它就会起作用，定义这个函数
Dialogue: 0,0:04:40.61,0:04:45.55,Default,,0,0,0,,但是有时候，把代码写到文件里更好
Dialogue: 0,0:04:45.55,0:04:49.88,Default,,0,0,0,,然后我们就可以 `source` 这个文件
Dialogue: 0,0:04:49.88,0:04:53.61,Default,,0,0,0,,这就会在 Shell 中加载脚本并执行
Dialogue: 0,0:04:54.21,0:04:56.81,Default,,0,0,0,,虽然现在看起来无事发生
Dialogue: 0,0:04:56.81,0:05:01.35,Default,,0,0,0,,但是现在 Shell 中已经定义了 `mcd` 函数
Dialogue: 0,0:05:01.88,0:05:05.65,Default,,0,0,0,,因此我们现在能，比如说执行 `mcd test`
Dialogue: 0,0:05:05.65,0:05:09.65,Default,,0,0,0,,就从 `tool` 目录移到了 `test` 目录
Dialogue: 0,0:05:09.65,0:05:13.41,Default,,0,0,0,,我们创建了文件夹并且进入其中
Dialogue: 0,0:05:16.01,0:05:18.85,Default,,0,0,0,,还有什么。结果是...
Dialogue: 0,0:05:18.85,0:05:22.25,Default,,0,0,0,,我们可以通过 `$1` 访问第一个参数
Dialogue: 0,0:05:22.25,0:05:26.31,Default,,0,0,0,,这里有许多被保留的命令[*]
Dialogue: 0,0:05:26.31,0:05:30.08,Default,,0,0,0,,例如 `$0` 将会是脚本的名字
Dialogue: 0,0:05:30.08,0:05:32.98,Default,,0,0,0,,`$2` 到 `$9` 是 bash 脚本的
Dialogue: 0,0:05:32.98,0:05:37.35,Default,,0,0,0,,第二个到第九个参数
Dialogue: 0,0:05:37.35,0:05:42.05,Default,,0,0,0,,有一些保留字可以直接在 Shell 中使用
Dialogue: 0,0:05:42.05,0:05:50.35,Default,,0,0,0,,例如 `$?` 能获取上条命令的错误代码（返回值）
Dialogue: 0,0:05:52.45,0:05:53.75,Default,,0,0,0,,我会简要解释这些
Dialogue: 0,0:05:53.75,0:05:59.31,Default,,0,0,0,,再比如，`$_` 会获取上条命令的最后一个参数
Dialogue: 0,0:05:59.31,0:06:03.45,Default,,0,0,0,,因此，我们搞定这个的另一种方式是
Dialogue: 0,0:06:03.45,0:06:07.45,Default,,0,0,0,,我们可以执行 `mkdir test`
Dialogue: 0,0:06:07.45,0:06:10.08,Default,,0,0,0,,与其重写一遍 `test`
Dialogue: 0,0:06:10.08,0:06:13.35,Default,,0,0,0,,不如我们用 `$_` 访问上条命令的一部分
Dialogue: 0,0:06:13.35,0:06:18.45,Default,,0,0,0,,也就是最后一个参数
Dialogue: 0,0:06:18.45,0:06:20.75,Default,,0,0,0,,它将被替换成 `test`
Dialogue: 0,0:06:20.75,0:06:22.98,Default,,0,0,0,,现在我们进去了 `test` 目录
Dialogue: 0,0:06:25.58,0:06:27.61,Default,,0,0,0,,像这样的例子很多，你应当熟悉他们
Dialogue: 0,0:06:27.61,0:06:32.35,Default,,0,0,0,,另一个我经常用的叫做 `bang bang`（`!!`）
Dialogue: 0,0:06:32.35,0:06:36.65,Default,,0,0,0,,每当，比如说，你试着创建某些东西
Dialogue: 0,0:06:36.65,0:06:37.85,Default,,0,0,0,,但你没有足够权限的时候
Dialogue: 0,0:06:37.85,0:06:39.11,Default,,0,0,0,,正是这个东西的用武之处
Dialogue: 0,0:06:39.11,0:06:41.05,Default,,0,0,0,,然后，你可以执行 `sudo !!`
Dialogue: 0,0:06:41.48,0:06:44.75,Default,,0,0,0,,`!!` 会被你刚刚尝试的命令取代
Dialogue: 0,0:06:44.75,0:06:46.78,Default,,0,0,0,,现在来试一下
Dialogue: 0,0:06:46.78,0:06:48.65,Default,,0,0,0,,现在它就提示我输入密码
Dialogue: 0,0:06:48.65,0:06:50.51,Default,,0,0,0,,因为我有了 sudo 权限
